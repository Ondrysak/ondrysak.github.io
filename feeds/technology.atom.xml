<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ondřej Naňka - Technology</title><link href="/" rel="alternate"></link><link href="/feeds/technology.atom.xml" rel="self"></link><id>/</id><updated>2018-05-07T19:05:00+02:00</updated><entry><title>Pelican with Github</title><link href="/github-pelican.html" rel="alternate"></link><published>2018-05-07T19:03:00+02:00</published><updated>2018-05-07T19:05:00+02:00</updated><author><name>Ondřej Naňka</name></author><id>tag:None,2018-05-07:/github-pelican.html</id><summary type="html">&lt;p&gt;What is Pelican, how to use it with Github&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello fellaz, I am sure you would love to make a wonder page like this one using Pelican and Github. Let's do it!&lt;/p&gt;
&lt;p&gt;You will need a Linux machine with python and pip and a regular Github user account.  &lt;/p&gt;
&lt;h1&gt;STEP BY STEP&lt;/h1&gt;
&lt;p&gt;First you need to create a repo named YOUR_GITHUB_USERNAME.github.io&lt;/p&gt;
&lt;p&gt;Clone it to your local linux machine&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_USERNAME.github.io.git
&lt;span class="c1"&gt;#mine was like this&lt;/span&gt;
&lt;span class="c1"&gt;#git clone git@github.com:Ondrysak/ondrysak.github.io.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go into the cloned repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; YOUR_GITHUB_USERNAME.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new branch as we want to preserve master for the html output of Pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -b pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install python packages &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican markdown ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run pelican quick start&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Something like this should follow&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.] ./
&amp;gt; What will be the title of this web site? Ondrysak&amp;#39;s blog
&amp;gt; Who will be the author of this web site? Ondrysak
&amp;gt; What will be the default language of this web site? [pt] en
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) y
&amp;gt; How many articles per page do you want? [10] 10
&amp;gt; What is your time zone? [Europe/Paris] 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y 
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) n
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) y
Done. Your new project is available at /home/username/YOUR_GITHUB_USERNAME.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to content folder and create a file &lt;em&gt;first.md&lt;/em&gt; in your favorite editor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Technology&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;technology&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dope&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt; &lt;span class="n"&gt;myself&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;


&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;fellaz&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;hear&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;cool&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To generate html and try the web on localhost go to back to the folder with the generated Makefile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html 
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add, commit and push the changes in the source to the &lt;em&gt;pelican&lt;/em&gt; branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class="s1"&gt;&amp;#39;first commit to da branch yo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Push the generated html to master using Makefile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Say woohoo and checkout your new page at YOUR_GITHUB_USERNAME.github.io!&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>Making world a better place with Sentry!</title><link href="/Sentry.html" rel="alternate"></link><published>2018-05-07T12:01:00+02:00</published><updated>2018-05-07T13:01:00+02:00</updated><author><name>Ondřej Naňka</name></author><id>tag:None,2018-05-07:/Sentry.html</id><summary type="html">&lt;p&gt;What is Sentry, what does it do?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Who doesn't hate errors, Sentry is here to help!&lt;/p&gt;
&lt;p&gt;Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Iterate continuously. Boost efficiency. Improve user experience.&lt;/p&gt;
&lt;p&gt;You are asking for sure, how to use Sentry in my python app, ask no more! Here is a simple example.&lt;/p&gt;
&lt;p&gt;First u need to make an account, the web ui is where you are gonna look if you recieve an alert!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sentry.io/signup/"&gt;Signup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you haven’t already, start by downloading Raven. The easiest way is with pip &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install raven --upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now all you need to do is add these two lines to your code!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;raven&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://&amp;lt;key&amp;gt;:&amp;lt;secret&amp;gt;@sentry.io/&amp;lt;project&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's done, congrats you just made world a better place.&lt;/p&gt;
&lt;h1&gt;Other supported platforms&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Cocoa&lt;/li&gt;
&lt;li&gt;Cordova&lt;/li&gt;
&lt;li&gt;Electron&lt;/li&gt;
&lt;li&gt;Elixir&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Minidump&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;React Native&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Integration with&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Asana&lt;/li&gt;
&lt;li&gt;Bitbucket&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;HipChat&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Jira&lt;/li&gt;
&lt;li&gt;SessionStack&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Splunk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More info in the docs you fool!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sentry.io/welcome/"&gt;Docker docs&lt;/a&gt;&lt;/p&gt;</content><category term="technology"></category><category term="sentry"></category></entry><entry><title>Docker is love!</title><link href="/Docker.html" rel="alternate"></link><published>2018-05-07T09:01:00+02:00</published><updated>2018-05-07T09:01:00+02:00</updated><author><name>Ondřej Naňka</name></author><id>tag:None,2018-05-07:/Docker.html</id><summary type="html">&lt;p&gt;What is Docker, what does it do?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello fellaz, if u did not hear about Docker before now its the time to change it!&lt;/p&gt;
&lt;p&gt;Virtualization is cool, Docker is cool++. &lt;/p&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. See example of Dockerfile to run flask app using gunicorn WSGI below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.6&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; LANG C.UTF-8&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; FLASK_APP=pyrest&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; FLASK_DEBUG=true&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apk add --no-cache py-gunicorn python curl &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    python -m ensurepip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -r /usr/lib/python*/ensurepip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    pip install --upgrade pip setuptools &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -r /root/.cache
COPY . /app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install .
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;gunicorn&amp;quot;, &amp;quot;-w&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;0.0.0.0:5000&amp;quot;, &amp;quot;pyrest:app&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;FROM&lt;/h1&gt;
&lt;p&gt;The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. As such, a valid Dockerfile must start with a FROM instruction. The image can be any valid image – it is especially easy to start by pulling an image from the Public Repositories.&lt;/p&gt;
&lt;h1&gt;ENV&lt;/h1&gt;
&lt;p&gt;The ENV instruction sets the environment variable &lt;key&gt; to the value &lt;value&gt;. This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well.&lt;/p&gt;
&lt;h1&gt;COPY&lt;/h1&gt;
&lt;p&gt;The COPY instruction copies new files or directories from &lt;src&gt; and adds them to the filesystem of the container at the path &lt;dest&gt;.&lt;/p&gt;
&lt;h1&gt;WORKDIR&lt;/h1&gt;
&lt;p&gt;The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction.
The WORKDIR instruction can be used multiple times in a Dockerfile. If a relative path is provided, it will be relative to the path of the previous WORKDIR instruction. For example:&lt;/p&gt;
&lt;h1&gt;RUN&lt;/h1&gt;
&lt;p&gt;The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.&lt;/p&gt;
&lt;h1&gt;CMD&lt;/h1&gt;
&lt;p&gt;There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.&lt;/p&gt;
&lt;p&gt;The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.&lt;/p&gt;
&lt;h2&gt;Docker commands&lt;/h2&gt;
&lt;p&gt;Lets list some basic commands you can play around with, I will talk about them more in depth later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build
docker images 
docker run
docker stop
docker &lt;span class="nb"&gt;exec&lt;/span&gt;
docker ps
docker rm
docker inspect
docker pull 
docker push
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;docker build&lt;/h1&gt;
&lt;p&gt;Is used for building a image&lt;/p&gt;
&lt;h1&gt;docker images&lt;/h1&gt;
&lt;p&gt;The default docker images will show all top level images, their repository and tags, and their size.&lt;/p&gt;
&lt;p&gt;Docker images have intermediate layers that increase reusability, decrease disk usage, and speed up docker build by allowing each step to be cached. These intermediate layers are not shown by default.&lt;/p&gt;
&lt;h1&gt;docker run&lt;/h1&gt;
&lt;p&gt;The docker run command first creates a writeable container layer over the specified image, and then starts it using the specified command. That is, docker run is equivalent to the API /containers/create then /containers/(id)/start. A stopped container can be restarted with all its previous changes intact using docker start. See docker ps -a to view a list of all containers.&lt;/p&gt;
&lt;h1&gt;docker stop&lt;/h1&gt;
&lt;p&gt;The main process inside the container will receive SIGTERM, and after a grace period, SIGKILL.&lt;/p&gt;
&lt;h1&gt;docker exec&lt;/h1&gt;
&lt;p&gt;The docker exec command runs a new command in a running container.&lt;/p&gt;
&lt;p&gt;The command started using docker exec only runs while the container’s primary process (PID 1) is running, and it is not restarted if the container is restarted.&lt;/p&gt;
&lt;p&gt;COMMAND will run in the default directory of the container. If the underlying image has a custom directory specified with the WORKDIR directive in its Dockerfile, this will be used instead.&lt;/p&gt;
&lt;h1&gt;docker ps&lt;/h1&gt;
&lt;p&gt;List containers&lt;/p&gt;
&lt;h1&gt;docker rm&lt;/h1&gt;
&lt;p&gt;Remove one or more containers&lt;/p&gt;
&lt;h1&gt;docker inspect&lt;/h1&gt;
&lt;p&gt;Docker inspect provides detailed information on constructs controlled by Docker.&lt;/p&gt;
&lt;p&gt;By default, docker inspect will render results in a JSON array.&lt;/p&gt;
&lt;h1&gt;docker pull&lt;/h1&gt;
&lt;p&gt;Most of your images will be created on top of a base image from the Docker Hub registry.&lt;/p&gt;
&lt;p&gt;Docker Hub contains many pre-built images that you can pull and try without needing to define and configure your own.&lt;/p&gt;
&lt;p&gt;To download a particular image, or set of images (i.e., a repository), use docker pull.&lt;/p&gt;
&lt;h1&gt;docker push&lt;/h1&gt;
&lt;p&gt;Use docker push to share your images to the Docker Hub registry or to a self-hosted one.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/install/overview/"&gt;Docker docs&lt;/a&gt;&lt;/p&gt;</content><category term="technology"></category><category term="docker"></category></entry></feed>